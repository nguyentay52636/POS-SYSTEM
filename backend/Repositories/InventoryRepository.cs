using System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using backend.Models;

namespace backend.Repositories
{
    public interface IInventoryRepository
    {
        Task<IReadOnlyList<Inventory>> ListAllAsync();
        Task<Inventory?> GetByProductIdAsync(int productId);
        Task<Inventory> UpdateAsync(Inventory inventory);
        Task<bool> ProductExistsAsync(int productId);
        Task<Inventory> CreateAsync(Inventory inventory);
        Task DeleteAsync(int inventoryId);
    }

    public class InventoryRepository : IInventoryRepository
    {
        private readonly ApplicationDbContext _db;

        public InventoryRepository(ApplicationDbContext db)
        {
            _db = db;
        }

        // ðŸ”¹ Láº¥y toÃ n bá»™ tá»“n kho kÃ¨m tÃªn sáº£n pháº©m (ProductName)
        public async Task<IReadOnlyList<Inventory>> ListAllAsync()
        {
            var query = from inv in _db.Inventories
                        join p in _db.Products on inv.ProductId equals p.ProductId
                        orderby inv.ProductId
                        select new Inventory
                        {
                            InventoryId = inv.InventoryId,
                            ProductId = inv.ProductId,
                            Quantity = inv.Quantity,
                            UpdatedAt = inv.UpdatedAt,

                            // Táº¡o object Product áº£o chá»‰ Ä‘á»ƒ chá»©a ProductName
                            Product = new Product
                            {
                                ProductId = p.ProductId,
                                ProductName = p.ProductName
                            }
                        };

            return await query.AsNoTracking().ToListAsync();
        }

        // ðŸ”¹ Láº¥y 1 báº£n ghi tá»“n kho theo ProductId (kÃ¨m ProductName)
        public async Task<Inventory?> GetByProductIdAsync(int productId)
        {
            var query = from inv in _db.Inventories
                        join p in _db.Products on inv.ProductId equals p.ProductId
                        where inv.ProductId == productId
                        select new Inventory
                        {
                            InventoryId = inv.InventoryId,
                            ProductId = inv.ProductId,
                            Quantity = inv.Quantity,
                            UpdatedAt = inv.UpdatedAt,
                            Product = new Product
                            {
                                ProductId = p.ProductId,
                                ProductName = p.ProductName
                            }
                        };

            return await query.AsNoTracking().FirstOrDefaultAsync();
        }

        // ðŸ”¹ Cáº­p nháº­t sá»‘ lÆ°á»£ng tá»“n
        public async Task<Inventory> UpdateAsync(Inventory inventory)
        {
            inventory.UpdatedAt = DateTime.UtcNow;
            _db.Inventories.Update(inventory);
            await _db.SaveChangesAsync();
            return inventory;
        }

        // ðŸ”¹ Kiá»ƒm tra sáº£n pháº©m cÃ³ tá»“n táº¡i khÃ´ng
        public async Task<bool> ProductExistsAsync(int productId)
        {
            return await _db.Products.AnyAsync(p => p.ProductId == productId);
        }

        // ðŸ”¹ Táº¡o báº£n ghi tá»“n kho má»›i
        public async Task<Inventory> CreateAsync(Inventory inventory)
        {
            inventory.UpdatedAt = DateTime.UtcNow;
            await _db.Inventories.AddAsync(inventory);
            await _db.SaveChangesAsync();
            return inventory;
        }

        // ðŸ”¹ XÃ³a báº£n ghi tá»“n kho
        public async Task DeleteAsync(int inventoryId)
        {
            var inventoryToDelete = new Inventory { InventoryId = inventoryId };
            _db.Inventories.Remove(inventoryToDelete);
            await _db.SaveChangesAsync();
        }
    }
}
